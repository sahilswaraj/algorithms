======================================================== GRAPH ALGORITHMS ===============================================================

    void dfs(int u, vector<int> graph[], vector<bool>& visited, vector<int>& result){
        
        if(visited[u] == true)
            return;
            
        visited[u] = true;
        result.push_back(u);
        
        for(int &v : graph[u]){
            if(visited[v] == false)
                dfs(v, graph, visited, result);
        }
    }
    
    vector<int> dfsOfGraph(int n, vector<int> graph[]) { // Dfs of graph
        
        vector<int> result;
        vector<bool> visited(n, false);
        
        dfs(0, graph, visited, result);
        
        return result;
    }

=========================================================================================================================================
    
    void bfs(int u, vector<int> graph[], vector<bool>& visited, vector<int>& result){
        
        queue<int> q;
        q.push(u);
        visited[u] = true;
        
        
        while(q.empty() == 0){
            int node = q.front();
            q.pop();
            result.push_back(node);
            
            for(int &v : graph[node]){
                if(visited[v] == false){
                    q.push(v);
                    visited[v] = true;
                }
            }
        }
        
    }
    
    vector<int> bfsOfGraph(int n, vector<int> graph[]) { // Bfs of graph
        
        vector<int> result;
        vector<bool> visited(n, false);
        
        bfs(0, graph, visited, result);
        
        return result;
    }

=========================================================================================================================================
    // detect cycle in an undirected graph.
    
    bool bfs(int s, vector<int> graph[], vector<bool>& visited){
        
        queue<pair<int,int>> q;
        q.push({s, -1});
        visited[s] = true;
        
        while(q.empty() == 0){
            auto t = q.front();
            q.pop();
            
            int u = t.first, parent = t.second;
            
            for(int &v : graph[u]){
                if(visited[v] == false){
                    q.push({v, u});
                    visited[v] = true;
                }
                else if(v != parent)
                    return true;
            }
        }
        
        return false;
    }
    
    bool dfs(int u, int parent, vector<int> graph[], vector<bool>& visited){
        
        visited[u] = true;
        
        for(int &v : graph[u]){
            if(v == parent)
                continue;
            if(visited[v] == true)
                return true;
            if(dfs(v, u, graph, visited))
                return true;
        }
        
        return false;
    }
    
    
    bool isCycle(int n, vector<int> graph[]) {
        
        vector<bool> visited(n, false);
        
        for(int i = 0; i < n; i++)
            if(visited[i] == false && dfs(i, -1, graph, visited))
                return true;
        
        return false;
    }

=========================================================================================================================================

    vector<int> parent;
    vector<int> rank;
    
    int Find(int u){    // find using path compression
        if(parent[u] == u)
            return u;
        
        return parent[u] = Find(parent[u]);
    }
    
    void Union(int u, int v){   // union by rank
        
        int uParent = Find(u);
        int vParent = Find(v);
        
        if(uParent == vParent)
            return;
        
        if(rank[uParent] > rank[vParent])
            parent[vParent] = uParent;
        else if(rank[uParent] < rank[vParent])
            parent[uParent] = vParent;
        else{
            parent[uParent] = vParent;
            rank[vParent]++;
        }
    }
    
    int detectCycle(int n, vector<int>graph[]) // cycle detection in unditected graph usning Union-Find
    {
        parent.resize(n);
        rank.resize(n);
        
        for(int i = 0; i < n; i++){
            parent[i] = i;
            rank[i] = 0;
        }
        
        for(int u = 0; u < n; u++){
            for(int &v : graph[u]){
                if(u < v){
                    int uParent = Find(u);
                    int vParent = Find(v);
                    
                    if(uParent == vParent)
                        return true;
                    
                    Union(u, v);
                }
            }
        }
        
        return false;
    }

=========================================================================================================================================

    void dfs(int s, vector<int> adj[], vector<bool> &vis, stack<int> &st){
        
            vis[s] = 1;
            
            for(int i : adj[s])
                if(vis[i] == false)
                    dfs(i, adj, vis, st);
                    
           
            st.push(s);         
    }
    
    vector<int> topoSort(int V, vector<int> adj[]) 
    {
        
        vector<bool> vis(V, false);
        stack<int> s;
        vector<int> res;
        
        for(int i = 0; i < V; i++)
            if(vis[i] == false)
                dfs(i, adj, vis, s);
                
        while(s.empty() == 0){
            
            res.push_back(s.top());
            s.pop();
        }  
        
        return res;
    }

======================================================================================================================================
 
    vector<int> topoSort(int V, vector<int> adj[]) 
    {
        
        vector<int> indegree(V, 0);
        queue<int> q;
        vector<int> result;
        
        for(int u = 0; u < V; u++){
            for(int &v : adj[u]){
                indegree[v]++;
            }
        }
        
        for(int i = 0; i < V; i++)
            if(indegree[i] == 0)
                q.push(i);
        
        while(!q.empty()){
            int t = q.front();
            q.pop();
            
            result.push_back(t);
            for(int &u: adj[t]){
                indegree[u]--;
                
                if(indegree[u] == 0)
                    q.push(u);
            }
        }
        
        return result;
    }
