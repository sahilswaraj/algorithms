======================================================== GRAPH ALGORITHMS ===============================================================

    void dfs(int u, vector<int> graph[], vector<bool>& visited, vector<int>& result){
        
        if(visited[u] == true)
            return;
            
        visited[u] = true;
        result.push_back(u);
        
        for(int &v : graph[u]){
            if(visited[v] == false)
                dfs(v, graph, visited, result);
        }
    }
    
    vector<int> dfsOfGraph(int n, vector<int> graph[]) { // Dfs of graph
        
        vector<int> result;
        vector<bool> visited(n, false);
        
        dfs(0, graph, visited, result);
        
        return result;
    }

=========================================================================================================================================
    
    void bfs(int u, vector<int> graph[], vector<bool>& visited, vector<int>& result){
        
        queue<int> q;
        q.push(u);
        visited[u] = true;
        
        
        while(q.empty() == 0){
            int node = q.front();
            q.pop();
            result.push_back(node);
            
            for(int &v : graph[node]){
                if(visited[v] == false){
                    q.push(v);
                    visited[v] = true;
                }
            }
        }
        
    }
    
    vector<int> bfsOfGraph(int n, vector<int> graph[]) { // Bfs of graph
        
        vector<int> result;
        vector<bool> visited(n, false);
        
        bfs(0, graph, visited, result);
        
        return result;
    }

=========================================================================================================================================
    // detect cycle in an undirected graph.
    
    bool bfs(int s, vector<int> graph[], vector<bool>& visited){
        
        queue<pair<int,int>> q;
        q.push({s, -1});
        visited[s] = true;
        
        while(q.empty() == 0){
            auto t = q.front();
            q.pop();
            
            int u = t.first, parent = t.second;
            
            for(int &v : graph[u]){
                if(visited[v] == false){
                    q.push({v, u});
                    visited[v] = true;
                }
                else if(v != parent)
                    return true;
            }
        }
        
        return false;
    }
    
    bool dfs(int u, int parent, vector<int> graph[], vector<bool>& visited){
        
        visited[u] = true;
        
        for(int &v : graph[u]){
            if(v == parent)
                continue;
            if(visited[v] == true)
                return true;
            if(dfs(v, u, graph, visited))
                return true;
        }
        
        return false;
    }
    
    
    bool isCycle(int n, vector<int> graph[]) {
        
        vector<bool> visited(n, false);
        
        for(int i = 0; i < n; i++)
            if(visited[i] == false && dfs(i, -1, graph, visited))
                return true;
        
        return false;
    }

=========================================================================================================================================

    vector<int> parent;
    vector<int> rank;
    
    int Find(int u){    // find using path compression
        if(parent[u] == u)
            return u;
        
        return parent[u] = Find(parent[u]);
    }
    
    void Union(int u, int v){   // union by rank
        
        int uParent = Find(u);
        int vParent = Find(v);
        
        if(uParent == vParent)
            return;
        
        if(rank[uParent] > rank[vParent])
            parent[vParent] = uParent;
        else if(rank[uParent] < rank[vParent])
            parent[uParent] = vParent;
        else{
            parent[uParent] = vParent;
            rank[vParent]++;
        }
    }
    
    int detectCycle(int n, vector<int>graph[]) // cycle detection in unditected graph usning Union-Find
    {
        parent.resize(n);
        rank.resize(n);
        
        for(int i = 0; i < n; i++){
            parent[i] = i;
            rank[i] = 0;
        }
        
        for(int u = 0; u < n; u++){
            for(int &v : graph[u]){
                if(u < v){
                    int uParent = Find(u);
                    int vParent = Find(v);
                    
                    if(uParent == vParent)
                        return true;
                    
                    Union(u, v);
                }
            }
        }
        
        return false;
    }

=========================================================================================================================================


    void dfs(int u, vector<int> graph[], vector<bool>& visited, stack<int>& st){
        
        visited[u] = true;
        
        for(int &v : graph[u]){
            if(visited[v] == false)
                dfs(v, graph, visited, st);
        }
        
        st.push(u);
    }
     
    vector<int> topoSort(int n, vector<int> graph[]) // Topological sort using dfs
    {
        vector<bool> visited(n, false);
        stack<int> st;
        
        for(int i = 0; i < n; i++)
            if(visited[i] == false)
                dfs(i, graph, visited, st);
            
        vector<int> result;
        
        while(st.empty() == 0){
            result.push_back(st.top());
            st.pop();
        }
        
        return result;
    }

======================================================================================================================================
 
    vector<int> topoSort(int V, vector<int> adj[]) 
    {
        
        vector<int> indegree(V, 0);
        queue<int> q;
        vector<int> result;
        
        for(int u = 0; u < V; u++){
            for(int &v : adj[u]){
                indegree[v]++;
            }
        }
        
        for(int i = 0; i < V; i++)
            if(indegree[i] == 0)
                q.push(i);
        
        while(!q.empty()){
            int t = q.front();
            q.pop();
            
            result.push_back(t);
            for(int &u: adj[t]){
                indegree[u]--;
                
                if(indegree[u] == 0)
                    q.push(u);
            }
        }
        
        return result;
    }

=======================================================================================================================================
 
    bool isCyclic(int n, vector<int> graph[]) { // Kahn's algorithm for cycle detection in directed graph
        
        queue<int> q;
        vector<int> indegree(n, 0);
        
        for(int u = 0; u < n; u++)
            for(int &v : graph[u])
                indegree[v]++;
        
        int count = 0;
        
        for(int i = 0; i < n; i++)
            if(indegree[i] == 0){
                q.push(i);
                count++;
            }

        while(q.empty() == 0){
            int u = q.front();
            q.pop();

            for(int &v : graph[u]){
                indegree[v]--;
                if(indegree[v] == 0){
                    q.push(v);
                    count++;
                }
            }
        }
        
        return (count == n) ? false : true;

    }

=========================================================================================================================================
    
    //cycle detection in directed graph using dfs

    bool dfs(int u, vector<int> graph[], vector<bool>& visited, vector<bool>& inStack){
        
        visited[u] = true;
        inStack[u] = true;
        
        for(auto &v : graph[u]){
            if(visited[v] == false){
                if(dfs(v, graph, visited, inStack) == true)
                    return true;
            }
            else if(inStack[v] == true)
                return true;
        }
        
        inStack[u] = false;
        return false;
    }
    
    bool isCyclic(int n, vector<int> graph[]) {
        
        vector<bool> visited(n, false), inStack(n, false);
        
        for(int i = 0; i < n; i++){
            if(visited[i] == false){
                if(dfs(i, graph, visited, inStack) == true)
                    return true;
            }
        }
        
        return false;
    }

=========================================================================================================================================

    bool isBipartiteBfs(int source, int currColor, vector<vector<int>>& graph, vector<int>& color){
        
        queue<int> q; 
        q.push(source);
        color[source] = currColor;

        while(q.empty() == 0){
            int u = q.front();
            q.pop();

            for(int &v : graph[u]){
                if(color[v] == color[u])
                    return false;
                if(color[v] == -1){
                    color[v] = 1 - color[u];
                    q.push(v);
                }
            }
        }

        return true;

    }

    bool isBipartiteDfs(int source, int currColor, vector<vector<int>>& graph, vector<int>& color){

        color[source] = currColor;

        for(int &u : graph[source]){
            if(color[u] == color[source])
                return false;
            else if(color[u] == -1){
                int t = 1 - currColor;
                if(isBipartiteDfs(u, t, graph, color) == false)
                    return false;
            }
        }

        return true;
    }

    bool isBipartite(vector<vector<int>>& graph) {
        
        vector<int> color(graph.size(), -1);

        for(int i = 0; i < graph.size(); i++){
            if(color[i] == -1 && isBipartiteBfs(i, 1, graph, color) == false)
                return false;
        }

        return true;
    }

=========================================================================================================================================

    vector <int> dijkstra(int n, vector<vector<int>> graph[], int src) // Dijkastra's Algorithm using priority queue
    {

        priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>> > pq;
        
        vector<int> dist(n, INT_MAX);
        dist[src] = 0;
        
        pq.push({0, src});
        
        while(!pq.empty()){
            int curr_node = pq.top().second, curr_dist = pq.top().first;
            pq.pop();
            
            if(curr_dist > dist[curr_node]) // Optimization over relaxation process
                continue;

            for(auto &it : graph[curr_node]){
                
                int it_node = it[0], it_dist = it[1];
                
                if(dist[it_node] > curr_dist + it_dist){
                    dist[it_node] = curr_dist + it_dist;
                    pq.push({dist[it_node], it_node});
                }
            }
        }
        
        return dist;
    }


    vector <int> dijkstra(int n, vector<vector<int>> graph[], int src) // Dijkastra algorithm using Hash Set
    {
        set<pair<int,int>> st;
        vector<int> dist(n, INT_MAX);
        
        dist[src] = 0;
        st.insert({0, src});
        
        while(st.empty() == 0){
            
            auto &it = *st.begin();
            int currNode = it.second, currDist = it.first;
            st.erase({it});
            
            for(auto &iter : graph[currNode]){
                int node = iter[0], weight = iter[1];
                
                if(dist[node] > currDist + weight){
                    if(dist[node] != INT_MAX)
                        st.erase({dist[node], node});
                    dist[node] = currDist + weight;
                    st.insert({dist[node], node});
                }
            }
            
        }
        
        return dist;
    }

======================================================================================================================================

    vector<int> bellman_ford(int n, vector<vector<int>>& edges, int src) {
        
        vector<int> dist(n, 1e8);
        dist[src] = 0;
        
        for(int i = 1; i <= n-1; i++){
            
            for(auto &edge : edges){
                int u = edge[0];
                int v = edge[1];
                int wt = edge[2];
                
                if(dist[u] != 1e8 && dist[u] + wt < dist[v])
                    dist[v] = dist[u] + wt;
            }
        }
        
        // check for negative cycle
        for(int i = 1; i <= n-1; i++){
            
            for(auto &edge : edges){
                int u = edge[0];
                int v = edge[1];
                int wt = edge[2];
                
                if(dist[u] != 1e8 && dist[u] + wt < dist[v])
                    return {-1};
            }
        }
        
        return dist;
    }

========================================================================================================================================

    void shortest_distance(vector<vector<int>>&matrix){ // Floyd-Warshall Algorithm
        
        int n = matrix.size(), m = matrix[0].size();
        
        for(int k = 0; k < n; k++){
            for(int i = 0; i < n; i++)
                for(int j = 0; j < m; j++)
                    matrix[i][j] = min(matrix[i][j], matrix[i][k] + matrix[k][j]);
        }
          
    }
        
=========================================================================================================================================

    int spanningTree(int V, vector<vector<int>> adj[])
    {
        using pi = pair<int,int>;
        
        priority_queue<pi, vector<pi>, greater<pi>> minHeap;
        minHeap.push({0,0});
        
        vector<bool> inMST(V, false);
        
        int sum = 0;
        
        while(minHeap.empty() == false){
            auto it = minHeap.top();
            minHeap.pop();
            
            int node = it.second, wt = it.first;
            
            if(inMST[node] == true)
                continue;
            
            inMST[node] = true;
            sum += wt;
            
            for(auto it : adj[node]){
                int currNode = it[0], currWt = it[1];
                
                if(inMST[currNode] == false){
                    minHeap.push({currWt, currNode});
                }
            }
        }
        
        return sum;
    }


